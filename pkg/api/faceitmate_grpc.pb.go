// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FaceitmateClient is the client API for Faceitmate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaceitmateClient interface {
	AddPlayer(ctx context.Context, in *RegisterPlayerRequest, opts ...grpc.CallOption) (*RegisterWatchingResponse, error)
}

type faceitmateClient struct {
	cc grpc.ClientConnInterface
}

func NewFaceitmateClient(cc grpc.ClientConnInterface) FaceitmateClient {
	return &faceitmateClient{cc}
}

func (c *faceitmateClient) AddPlayer(ctx context.Context, in *RegisterPlayerRequest, opts ...grpc.CallOption) (*RegisterWatchingResponse, error) {
	out := new(RegisterWatchingResponse)
	err := c.cc.Invoke(ctx, "/api.Faceitmate/AddPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceitmateServer is the server API for Faceitmate service.
// All implementations should embed UnimplementedFaceitmateServer
// for forward compatibility
type FaceitmateServer interface {
	AddPlayer(context.Context, *RegisterPlayerRequest) (*RegisterWatchingResponse, error)
}

// UnimplementedFaceitmateServer should be embedded to have forward compatible implementations.
type UnimplementedFaceitmateServer struct {
}

func (UnimplementedFaceitmateServer) AddPlayer(context.Context, *RegisterPlayerRequest) (*RegisterWatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlayer not implemented")
}

// UnsafeFaceitmateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaceitmateServer will
// result in compilation errors.
type UnsafeFaceitmateServer interface {
	mustEmbedUnimplementedFaceitmateServer()
}

func RegisterFaceitmateServer(s grpc.ServiceRegistrar, srv FaceitmateServer) {
	s.RegisterService(&Faceitmate_ServiceDesc, srv)
}

func _Faceitmate_AddPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceitmateServer).AddPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Faceitmate/AddPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceitmateServer).AddPlayer(ctx, req.(*RegisterPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Faceitmate_ServiceDesc is the grpc.ServiceDesc for Faceitmate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Faceitmate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Faceitmate",
	HandlerType: (*FaceitmateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlayer",
			Handler:    _Faceitmate_AddPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faceitmate.proto",
}
